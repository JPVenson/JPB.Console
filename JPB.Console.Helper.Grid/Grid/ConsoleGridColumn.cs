using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace JPB.Console.Helper.Grid.NetCore.Grid
{
    public class ConsoleGridColumn : IDisposable
    {
        public ConsoleGridColumn()
        {
            Buffer = new ConcurrentDictionary<object, object>();
        }

        private Func<object, object> _getValue;
        private IDictionary<object, object> Buffer { get; set; }

        private object _bufferdValue;
        private bool _hasBufferdValue;
        internal bool AutoGenerated { get; set; }

        public AlignedProperty AlignedProperty { get; set; }

        public string Name { get; set; }
        public int MaxContentSize { get; set; }

        public void ClearBuffer()
        {
            this.Buffer.Clear();
        }

        public int MaxSize
        {
            get
            {
                var val = Name.Length > MaxContentSize ? Name.Length : MaxContentSize;
                return val;
            }
        }

        public Func<object, object> GetValue
        {
            get
            {
                return (x) =>
                {
                    var buffer = Buffer.FirstOrDefault(f => f.Key.Equals(x));
                    if (buffer.Key != null)
                    {
                        return buffer.Value;
                    }
                    var realValue = _getValue(x);
                    Buffer.Add(x, realValue);
                    return realValue;
                };
            }
            set
            {
                _getValue = value;
            }
        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose()
        {
            this.ClearBuffer();
        }
    }

    public class ConsoleGridColumn<T> : ConsoleGridColumn
    {
        public new Func<T, object> GetValue
        {
            get { return (arg) => base.GetValue(arg); }
            set { base.GetValue = o => value((T)o); }
        }
    }
}