using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace JPB.Console.Helper.Grid.Grid
{
	public enum CacheStrategy
	{
		Always,
		Never
	}

	public class ConsoleGridColumn : IDisposable
	{
		private object _bufferdValue;

		private Func<object, object> _getValue;
		private bool _hasBufferdValue;
		private string _name;

		public ConsoleGridColumn(string name)
		{
			Name = name;
			Buffer = new ConcurrentDictionary<object, object>();
		}

		private IDictionary<object, object> Buffer { get; }
		internal bool AutoGenerated { get; set; }

		public AlignedProperty AlignedProperty { get; set; }

		public CacheStrategy CacheStrategy { get; set; }

		public string Name
		{
			get => _name;
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("value");
				}

				_name = value;
			}
		}

		public int MaxContentSize { get; set; }

		public int MaxSize
		{
			get
			{
				var val = Name.Length > MaxContentSize ? Name.Length : MaxContentSize;
				return val;
			}
		}

		public Func<object, object> GetValue
		{
			get
			{
				return x =>
				{
					if (CacheStrategy == CacheStrategy.Always)
					{
						var buffer = Buffer.FirstOrDefault(f => f.Key == x);
						if (buffer.Key != null)
						{
							return buffer.Value;
						}
					}

					var realValue = _getValue(x);
					if (CacheStrategy == CacheStrategy.Always)
					{
						Buffer.Add(x, realValue);
					}

					return realValue;
				};
			}
			set => _getValue = value;
		}

		/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
		public void Dispose()
		{
			ClearBuffer();
		}

		public void ClearBuffer()
		{
			Buffer.Clear();
		}
	}

	public class BoundConsoleGridColumn : ConsoleGridColumn
	{
		public BoundConsoleGridColumn(string fieldName) : base(fieldName)
		{
			FieldName = fieldName;

			GetValue = obj => { return obj.GetType().GetProperty(FieldName)?.GetValue(obj); };
		}

		public string FieldName { get; }
	}

	public class ConsoleGridColumn<T> : ConsoleGridColumn
	{
		public ConsoleGridColumn(string name) : base(name)
		{
		}

		public new Func<T, object> GetValue
		{
			get { return arg => base.GetValue(arg); }
			set { base.GetValue = o => value((T) o); }
		}
	}
}